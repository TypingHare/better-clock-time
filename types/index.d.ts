// Generated by dts-bundle-generator v9.5.1

/**
 * Represents an abstract concept of a clock-based time value.
 *
 * This class serves as the base abstraction for working with time values
 * represented in milliseconds, offering comprehensive utilities to convert
 * between time units (seconds, minutes, hours), and to perform arithmetic
 * operations such as extending or consuming time.
 *
 * `ClockTime` is designed to be subclassed, requiring concrete implementations
 * to define how the time value is stored and manipulated. Key properties
 * like `ms`, `second`, `minute`, and `hour`, as well as operations like
 * `consume()` and `extend()`, are left abstract to allow for flexibility
 * in various contexts (e.g., timers, clocks, durations).
 *
 * This class also provides a factory-based instantiation mechanism via
 * `instantiateClass`, enabling controlled and uniform creation of instances
 * using `ClockTime.of(...)` style methods.
 *
 * @example
 *
 *     ClockTime.instantiateClass = MyClockTime;
 *     const t = ClockTime.ofMinutes(90);
 *     console.log(t.toHours()); // 1.5
 *
 * @since v1.0.0
 */
export declare abstract class ClockTime {
	static readonly SECOND_IN_MINUTE = 60;
	static readonly MINUTE_IN_HOUR = 60;
	static readonly MILLISECONDS_IN_SECOND = 1000;
	static readonly MILLISECONDS_IN_MINUTE = 60000;
	static readonly MILLISECONDS_IN_HOUR = 3600000;
	/**
	 * The class extending ClockTime that is used to create an instance.
	 */
	static instantiateClass?: new (milliseconds: number) => ClockTime;
	/**
	 * Creates a new ClockTime instance from the specified number of
	 * milliseconds.
	 *
	 * @param milliseconds - The number of milliseconds to initialize the
	 *   ClockTime with.
	 * @returns A new instance of ClockTime.
	 * @throws {Error} If the `instantiateClass` static property is not defined.
	 * @since v1.0.0
	 */
	static of(milliseconds?: number): ClockTime;
	/**
	 * Creates a new ClockTime instance from the specified number of seconds.
	 *
	 * @param seconds - The number of seconds.
	 * @returns A new instance of ClockTime representing the given time.
	 * @since v1.0.0
	 */
	static ofSeconds(seconds: number): ClockTime;
	/**
	 * Creates a new ClockTime instance from the specified number of minutes.
	 *
	 * @param minutes - The number of minutes.
	 * @returns A new instance of ClockTime representing the given time.
	 * @since v1.0.0
	 */
	static ofMinutes(minutes: number): ClockTime;
	/**
	 * Creates a new ClockTime instance from the specified number of hours.
	 *
	 * @param hours - The number of hours.
	 * @returns A new instance of ClockTime representing the given time.
	 * @since v1.0.0
	 */
	static ofHours(minutes: number): ClockTime;
	/**
	 * Creates a copy of the current ClockTime instance.
	 *
	 * @returns A new ClockTime instance with the same millisecond value.
	 * @since v1.0.0
	 */
	clone(): ClockTime;
	/**
	 * Returns the milliseconds this ClockTime instance represents.
	 *
	 * @returns The milliseconds this ClockTime instance represents.
	 * @since v1.0.0
	 */
	abstract get ms(): number;
	/**
	 * Gets the second component of this ClockTime instance.
	 *
	 * @returns The seconds part of the time, from `0` to `59`.
	 * @since v1.0.0
	 */
	abstract get second(): number;
	/**
	 * Gets the minute component of this ClockTime instance.
	 *
	 * @returns The minutes part of the time, from `0` to `59`.
	 * @since v1.0.0
	 */
	abstract get minute(): number;
	/**
	 * Gets the hour component of this ClockTime instance.
	 *
	 * @returns The hours part of the time.
	 * @since v1.0.0
	 */
	abstract get hour(): number;
	/**
	 * Consumes time by reducing the internal value by the given milliseconds.
	 *
	 * @param ms - The number of milliseconds to consume.
	 * @returns The current instance after consuming the specified time.
	 * @since v1.0.0
	 */
	abstract consume(ms: number): this;
	/**
	 * Consumes time by reducing the internal value by the given amount.
	 *
	 * The number of milliseconds of the ClockTime instance will consume.
	 *
	 * @param clockTime - A ClockTime instance to consume.
	 * @returns The current instance after consuming the specified time.
	 * @since v1.0.0
	 */
	abstract consume(clockTime: this): this;
	/**
	 * Consumes time by reducing the internal value by the given amount.
	 *
	 * @param time - The amount of time to consume, as milliseconds or a
	 *   ClockTime instance.
	 * @returns The current instance after consuming the specified time.
	 * @since v1.0.0
	 */
	abstract consume(time: number | ClockTime): this;
	/**
	 * Extends time by increasing the internal value by the given milliseconds.
	 *
	 * @param ms - The number of milliseconds to extend.
	 * @returns The current instance after extending the specified time.
	 * @since v1.0.0
	 */
	abstract extend(ms: number): this;
	/**
	 * Extends time by increasing the internal value by the given amount.
	 *
	 * The number of milliseconds of the ClockTime instance will extend.
	 *
	 * @param clockTime - A ClockTime instance to extend.
	 * @returns The current instance after extending the specified time.
	 * @since v1.0.0
	 */
	abstract extend(clockTime: this): this;
	/**
	 * Extends time by increasing the internal value by the given amount.
	 *
	 * @param time - The amount of time to extend, as milliseconds or a
	 *   ClockTime instance.
	 * @returns The current instance after extending the specified time.
	 * @since v1.0.0
	 */
	abstract extend(time: number | ClockTime): this;
	/**
	 * Consumes time by subtracting the specified number of seconds.
	 *
	 * @param seconds - The number of seconds to consume.
	 * @returns The current instance after consuming the specified time.
	 * @since v1.0.0
	 */
	consumeSecond(seconds: number): this;
	/**
	 * Consumes time by subtracting the specified number of minutes.
	 *
	 * @param minutes - The number of minutes to consume.
	 * @returns The current instance after consuming the specified time.
	 * @since v1.0.0
	 */
	consumeMinute(minutes: number): this;
	/**
	 * Consumes time by subtracting the specified number of hours.
	 *
	 * @param hours - The number of hours to consume.
	 * @returns The current instance after consuming the specified time.
	 * @since v1.0.0
	 */
	consumeHour(hours: number): this;
	/**
	 * Extends time by increasing the specified number of seconds.
	 *
	 * @param seconds - The number of seconds to extend.
	 * @returns The current instance after extending the specified time.
	 * @since v1.0.0
	 */
	extendSecond(seconds: number): this;
	/**
	 * Extends time by increasing the specified number of minutes.
	 *
	 * @param minutes - The number of minutes to extend.
	 * @returns The current instance after extending the specified time.
	 * @since v1.0.0
	 */
	extendMinute(minutes: number): this;
	/**
	 * Extends time by increasing the specified number of hours.
	 *
	 * @param hours - The number of hours to extend.
	 * @returns The current instance after extending the specified time.
	 * @since v1.0.0
	 */
	extendHour(hours: number): this;
	/**
	 * Returns the time value in seconds as a floating-point number.
	 *
	 * @returns The number of seconds represented by this ClockTime instance.
	 * @since v1.0.0
	 */
	toSeconds(): number;
	/**
	 * Returns the time value in minutes as a floating-point number.
	 *
	 * @returns The number of minutes represented by this ClockTime instance.
	 * @since v1.0.0
	 */
	toMinutes(): number;
	/**
	 * Returns the time value in hours as a floating-point number.
	 *
	 * @returns The number of hours represented by this ClockTime instance.
	 * @since v1.0.0
	 */
	toHours(): number;
	/**
	 * Returns the time value in whole seconds by flooring the result.
	 *
	 * @returns The floored number of seconds represented by this ClockTime
	 *   instance.
	 * @since v1.0.0
	 */
	toSecondsInt(): number;
	/**
	 * Returns the time value in whole minutes by flooring the result.
	 *
	 * @returns The floored number of minutes represented by this ClockTime
	 *   instance.
	 * @since v1.0.0
	 */
	toMinutesInt(): number;
	/**
	 * Returns the time value in whole hours by flooring the result.
	 *
	 * @returns The floored number of hours represented by this ClockTime
	 *   instance.
	 * @since v1.0.0
	 */
	toHoursInt(): number;
	/**
	 * Converts this ClockTime instance into a string.
	 *
	 * @returns A clock time string in the specified format.
	 * @since v1.0.0
	 */
	toString(format?: string): string;
}
/**
 * The default implementation of ClockTime.
 *
 * @since v1.0.0
 */
export declare class DefaultClockTime extends ClockTime {
	/**
	 * The internal milliseconds of this ClockTime instance.
	 */
	private internalMs;
	/**
	 * Creates a ClockTime instance.
	 *
	 * @param milliseconds - The number of milliseconds to initialize the
	 *   ClockTime with.
	 * @since v1.0.0
	 */
	constructor(milliseconds: number);
	get ms(): number;
	get second(): number;
	get minute(): number;
	get hour(): number;
	consume(ms: number): this;
	consume(clockTime: this): this;
	extend(ms: number): this;
	extend(clockTime: this): this;
}

export {};
