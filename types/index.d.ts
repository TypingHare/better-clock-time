// Generated by dts-bundle-generator v9.5.1

export type HourMinuteSecondClass = new (...args: any[]) => HourMinuteSecond;
/**
 * @author James Chan
 */
export declare abstract class HourMinuteSecond {
	/**
	 * The class of creating an instance using HourMinuteSecond.create() and other static methods.
	 * @since 1.1.0
	 * @private
	 */
	private static staticInstantiateClass?;
	static SECOND_IN_MINUTE: number;
	static MINUTE_IN_HOUR: number;
	static MILLISECONDS_IN_SECOND: number;
	static MILLISECONDS_IN_MINUTE: number;
	static MILLISECONDS_IN_HOUR: number;
	/**
	 * Creates an instance of HourMinuteSecond.
	 * @param ms Milliseconds.
	 */
	static create(ms?: number): HourMinuteSecond;
	/**
	 * Creates an hour-minute-second instance of specified milliseconds.
	 * @param milliseconds
	 * @since v1.2.0
	 */
	static of(milliseconds: number): HourMinuteSecond;
	/**
	 * Creates an hour-minute-second instance of specified seconds.
	 * @param seconds
	 */
	static ofSeconds(seconds: number): HourMinuteSecond;
	/**
	 * Creates an hour-minute-second instance of specified minutes.
	 * @param minutes
	 */
	static ofMinutes(minutes: number): HourMinuteSecond;
	/**
	 * Creates an hour-minute-second instance of specified hours.
	 * @param hours
	 */
	static ofHours(hours: number): HourMinuteSecond;
	/**
	 * Sets the static instantiate class.
	 * @param staticInstantiateClass
	 */
	static setStaticInitiateClass(staticInstantiateClass: HourMinuteSecondClass): void;
	/**
	 * Returns time in milliseconds.
	 */
	abstract get ms(): number;
	/**
	 * Returns the hour.
	 */
	abstract get hour(): number;
	/**
	 * Returns the minute.
	 */
	abstract get minute(): number;
	/**
	 * Returns the second.
	 */
	abstract get second(): number;
	/**
	 * Consumes a time.
	 * @param hourMinuteSecond the time to consume.
	 */
	abstract consume(hourMinuteSecond: HourMinuteSecond): this;
	/**
	 * Consumes a time.
	 * @param ms time in milliseconds.
	 */
	abstract consume(ms: number): this;
	/**
	 * Consumes a time.
	 * @param time hour-minute-second instance or time in milliseconds to consume.
	 */
	abstract consume(time: number | HourMinuteSecond): this;
	/**
	 * Extends a time.
	 * @param hourMinuteSecond the time to consume.
	 */
	abstract extend(hourMinuteSecond: this): this;
	/**
	 * Extends a time.
	 * @param ms time in milliseconds to extend.
	 */
	abstract extend(ms: number): this;
	/**
	 * Extends a time.
	 * @param time hour-minute-second instance or time in milliseconds to extend.
	 */
	abstract extend(time: number | HourMinuteSecond): this;
	/**
	 * Returns a clone object.
	 */
	abstract clone(): HourMinuteSecond;
	/**
	 * Consumes time in seconds.
	 * @param seconds seconds to consume.
	 */
	consumeSecond(seconds: number): this;
	/**
	 * Consumes time in minutes;
	 * @param minutes minutes to consume.
	 */
	consumeMinute(minutes: number): this;
	/**
	 * Consumes time in hours;
	 * @param hours hours to consume.
	 */
	consumeHour(hours: number): this;
	/**
	 * Extends time in seconds.
	 * @param seconds seconds to extend.
	 */
	extendSecond(seconds: number): this;
	/**
	 * Extends time in minutes;
	 * @param minutes minutes to extend.
	 */
	extendMinute(minutes: number): this;
	/**
	 * Extends time in hours;
	 * @param hours hours to extend.
	 */
	extendHour(hours: number): this;
	/**
	 * Converts this hour-minute-second instance to string.
	 * @see moment
	 */
	toString(format?: string): string;
	/**
	 * Converts this hour-minute-second instance to seconds.
	 * @since v1.2.0
	 */
	toSeconds(): number;
	/**
	 * Converts this hour-minute-second instance to minutes.
	 * @since v1.2.0
	 */
	toMinutes(): number;
	/**
	 * Converts this hour-minute-second instance to hours.
	 * @since v1.2.0
	 */
	toHours(): number;
	/**
	 * Converts this hour-minute-second instance to seconds (floor value).
	 * @since v1.2.0
	 */
	toSecondsInt(): number;
	/**
	 * Converts this hour-minute-second instance to minutes (floor value).
	 * @since v1.2.0
	 */
	toMinutesInt(): number;
	/**
	 * Converts this hour-minute-second instance to hours (floor value).
	 * @since v1.2.0
	 */
	toHoursInt(): number;
}
/**
 * @author James Chan
 */
export declare class QuickHourMinuteSecond extends HourMinuteSecond {
	private _ms;
	private _second;
	private _minute;
	/**
	 * Creates a quick hour minute second.
	 * @param ms time in milliseconds.
	 */
	constructor(ms: number);
	/**
	 * Creates a quick hour minute second.
	 * @param hour hours.
	 * @param minute minutes.
	 * @param second seconds.
	 */
	constructor(hour: number, minute: number, second: number);
	get ms(): number;
	get second(): number;
	get minute(): number;
	/**
	 * Hours.
	 * @private
	 */
	private _hour;
	get hour(): number;
	/**
	 * Creates an hour-minute-second instance of specified seconds.
	 * @param seconds
	 */
	static ofSeconds(seconds: number): QuickHourMinuteSecond;
	/**
	 * Creates an hour-minute-second instance of specified minutes.
	 * @param minutes
	 */
	static ofMinutes(minutes: number): QuickHourMinuteSecond;
	/**
	 * Creates an hour-minute-second instance of specified hours.
	 * @param hours
	 */
	static ofHours(hours: number): QuickHourMinuteSecond;
	consume(hourMinuteSecond: HourMinuteSecond): this;
	consume(ms: number): this;
	extend(hourMinuteSecond: HourMinuteSecond): this;
	extend(ms: number): this;
	clone(): QuickHourMinuteSecond;
	/**
	 * Computes hours, minutes, and seconds.
	 * @private
	 */
	private compute;
}
/**
 * @author James Chan
 */
export declare class SlowHourMinuteSecond extends HourMinuteSecond {
	/**
	 * Creates a slow hour minute second.
	 * @param ms time in milliseconds.
	 */
	constructor(ms: number);
	/**
	 * Milliseconds.
	 * @private
	 */
	private _ms;
	get ms(): number;
	get hour(): number;
	get minute(): number;
	get second(): number;
	/**
	 * Creates an hour-minute-second instance of specified seconds.
	 * @param seconds
	 */
	static ofSeconds(seconds: number): SlowHourMinuteSecond;
	/**
	 * Creates an hour-minute-second instance of specified minutes.
	 * @param minutes
	 */
	static ofMinutes(minutes: number): SlowHourMinuteSecond;
	/**
	 * Creates an hour-minute-second instance of specified hours.
	 * @param hours
	 */
	static ofHours(hours: number): SlowHourMinuteSecond;
	consume(hourMinuteSecond: HourMinuteSecond): this;
	consume(ms: number): this;
	extend(hourMinuteSecond: HourMinuteSecond): this;
	extend(ms: number): this;
	clone(): SlowHourMinuteSecond;
}

export {};
